from flask import Flask, render_template, jsonify, send_file
import psutil
import platform
import socket
import subprocess
import hashlib
import os
import datetime
import requests
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet

# Flask app
app = Flask(__name__)

VT_API_KEY = "efc6244408780c272c1b783ff77e34b1ea7e721a809f7c5ea07445e1c7a38b6c"
PDF_REPORT = "system_scan_report.pdf"


# ------------------ Security Scan Functions ------------------ #
def check_firewall_status():
    try:
        if platform.system() == "Windows":
            result = subprocess.check_output("netsh advfirewall show allprofiles", shell=True).decode()
            for line in result.splitlines():
                if "State" in line and "ON" in line:
                    return "ON"
            return "OFF"
        else:
            result = subprocess.getoutput("ufw status")
            return "active" if "active" in result else "inactive"
    except Exception as e:
        return f"Error: {e}"


def hash_file(file_path):
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except:
        return None


def check_malware_virustotal(file_path):
    file_hash = hash_file(file_path)
    if not file_hash:
        return "Unreadable file"

    url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
    headers = {"x-apikey": VT_API_KEY}
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            data = response.json()
            malicious = data['data']['attributes']['last_analysis_stats']['malicious']
            return f"Detected malicious: {malicious}" if malicious > 0 else "Clean"
        else:
            return "Not found in VirusTotal"
    except:
        return "VT API Error"


def run_malware_scan():
    system = platform.system()
    try:
        if system == "Windows":
            result = subprocess.check_output(
                r'"C:\Program Files\Windows Defender\MpCmdRun.exe" -Scan -ScanType 1',
                shell=True
            ).decode(errors="ignore")
            return result if result else "Scan completed"

        elif system == "Linux":
            result = subprocess.getoutput("clamscan -r --bell -i /home")
            return result if result else "No infections found"

        else:
            return "Malware scanning not supported on this OS"
    except Exception as e:
        return f"Error running malware scan: {e}"


def scan():
    results = {}

    # System Info
    results['system_info'] = {
        "os": platform.platform(),
        "architecture": platform.architecture(),
        "hostname": socket.gethostname(),
        "uptime": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    # CPU / Memory / Disk
    results['cpu_usage'] = psutil.cpu_percent(interval=1)
    results['memory'] = psutil.virtual_memory()._asdict()
    results['disk'] = psutil.disk_usage('/')._asdict()

    # Firewall
    results['firewall_status'] = check_firewall_status()

    # Processes
    processes = []
    for p in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_percent']):
        try:
            proc_info = p.info
            proc_info['suspicious'] = proc_info['cpu_percent'] > 50 or proc_info['memory_percent'] > 30
            processes.append(proc_info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    results['running_processes'] = processes

    # Network
    conns = []
    for c in psutil.net_connections(kind='inet'):
        try:
            conns.append({
                "pid": c.pid,
                "laddr": str(c.laddr),
                "raddr": str(c.raddr) if c.raddr else None,
                "status": c.status
            })
        except:
            continue
    results['network_connections'] = conns

    # Malware Checks
    current_file = os.path.abspath(__file__)
    results['virustotal_check'] = check_malware_virustotal(current_file)
    results['local_malware_scan'] = run_malware_scan()

    return results


# ------------------ PDF Report Generator ------------------ #
# modules/Local_System_Vulnerability_Scanner.py

from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
import datetime

PDF_REPORT = "Local_System_Vulnerability_Report.pdf"

def generate_pdf(results):
    """Generate a detailed PDF report with ALL data in tabular format (fitted to margins)."""
    doc = SimpleDocTemplate(
        PDF_REPORT,
        pagesize=letter,
        rightMargin=30,
        leftMargin=30,
        topMargin=30,
        bottomMargin=30
    )
    styles = getSampleStyleSheet()
    story = []

    # Title
    title_style = ParagraphStyle(
        'title',
        parent=styles['Heading1'],
        alignment=1,
        textColor=colors.darkblue,
        fontSize=18,
        spaceAfter=20
    )
    story.append(Paragraph("Local System Vulnerability Scan Report", title_style))
    story.append(Paragraph(f"Generated On: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", styles["Normal"]))
    story.append(Spacer(1, 20))

    if not results:
        story.append(Paragraph("âš  No scan results available.", styles["Normal"]))
    else:
        for section, data in results.items():
            story.append(Paragraph(f"ðŸ“Œ {section}", styles["Heading2"]))
            story.append(Spacer(1, 12))

            table_data = []

            # Case 1: Dictionary â†’ Key-Value table
            if isinstance(data, dict):
                table_data = [["Key", "Value"]] + [[str(k), str(v)] for k, v in data.items()]

            # Case 2: List of dicts â†’ Normal Table
            elif isinstance(data, list) and len(data) > 0 and isinstance(data[0], dict):
                headers = list(data[0].keys())
                table_data = [headers] + [[str(item.get(h, "")) for h in headers] for item in data]

            # Case 3: List of strings â†’ One-column table
            elif isinstance(data, list):
                table_data = [["Items"]] + [[str(item)] for item in data]

            # Case 4: Any other type â†’ Wrap into table
            else:
                table_data = [["Value"], [str(data)]]

            # Auto-fit columns to page width
            page_width = letter[0] - doc.leftMargin - doc.rightMargin
            col_count = len(table_data[0])
            col_width = page_width / col_count
            col_widths = [col_width] * col_count

            # Create table
            table = Table(table_data, repeatRows=1, hAlign="LEFT", colWidths=col_widths)
            table.setStyle(TableStyle([
                ("BACKGROUND", (0, 0), (-1, 0), colors.darkblue),
                ("TEXTCOLOR", (0, 0), (-1, 0), colors.whitesmoke),
                ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
                ("ALIGN", (0, 0), (-1, -1), "LEFT"),
                ("VALIGN", (0, 0), (-1, -1), "TOP"),
                ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
                ("FONTSIZE", (0, 0), (-1, -1), 8),
            ]))
            story.append(table)

            story.append(Spacer(1, 20))

    doc.build(story)
    return PDF_REPORT
